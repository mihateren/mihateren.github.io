{"0": {
    "doc": "Глава 1. JVM и первая программа",
    "title": "Глава 1. JVM и первая программа",
    "content": "Что нужно вообще знать про джаву? Java — объектно-ориентированный язык программирования со строгой статической типизацией. Особенность Java в том, что программы, написанные на этом языке, будут одинаково работать на любой операционной системе (Windows, Linux, Android и др). Это свойство называется кроссплатформенностью. Главное условие для его выполнения — на устройстве должна быть JVM необходимой версии. И тут сразу же всплывает вопрос с собеседования — что такое JVM, JDK, JRE и в чем их различия. ",
    "url": "/chapters/chapter1.html",
    
    "relUrl": "/chapters/chapter1.html"
  },"1": {
    "doc": "Глава 1. JVM и первая программа",
    "title": "1. JVM, JDK, JRE",
    "content": "Для того, чтобы на своем компьютере иметь возможность писать код на Java, нужно сделать следующее: . | Установить JDK | Установить IDE | . Что вообще происходит, когда ты пишешь код и нажимаешь на кнопку запуска программы? . 1) Написание исходного кода. Ты создаёшь файл с расширением .java, например HelloWorld.java, и прописываешь в нём код. Аналогия из жизни: это похоже на то, как если бы ты писал инструкцию в виде письма на родном языке. 2) Компиляция (javac) . IDE или команда javac HelloWorld.java запускает компилятор из состава JDK. Компилятор — это специальная программа, которая проверяет твой код на корректность синтаксиса и преобразует его в байткод — универсальный “язык”, понятный Java Virtual Machine (JVM). Результат сохраняется в файле HelloWorld.class. Аналогия из жизни: приходит переводчик и садится переводить твое письмо на международный язык, понятный любому исполнителю. 3) Загрузка байткода (Class Loader) . Запуск команды java HelloWorld или нажатие “Run” в IDE приводит к запуску JRE, которая включает в себя JVM. JVM находит файл HelloWorld.class, загружает его в свою память через специальный компонент — Class Loader. 4) Проверека безопасности (ByteCode Verifier) . JVM проверяет загруженный байткод на соответствие спецификации: нет ли попыток обойти ограничения безопасности, не обращается ли программа к недопустимой памяти и т. д. Это как таможенный досмотр багажа перед полё . 5) Интерпретация и JIT-компиляция . JVM выполняет код построчно (интерпретирует его в машинный код), как если бы переводчик переводил по одному предложению, а не весь текст разом. Важно! Многократное выполнение одних и тех же участков кода — процесс нерациональный и затратный. Подобно тому, как опытный переводчик, встретив знакомую фразу в тексте, не станет вновь обращаться к словарю, а мгновенно воспроизведёт её перевод из памяти. JVM тоже не глупая: она понимает, что если определенный участок кода выполняется многократно, она компилирует байткод в машинный код “на лету” для ускорения работы, сохраняя при этом результаты в кэше. Этот процесс называется Just-In-Time компиляцией (JIT). Как работает JIT-компиляция под капотом? Когда программа только запускается: . | JVM интерпретирует байткод — то есть переводит его в машинные инструкции процессора по мере выполнения. | При этом JVM анализирует, какие участки кода (методы, циклы) выполняются чаще других — такие участки называют горячими (hot spots). | . Что происходит с горячими участками: . | Если определённый фрагмент кода часто используется, JVM передаёт его JIT-компилятору. | JIT-компилятор преобразует байткод этого участка в нативный машинный код, который понятен непосредственно процессору вашего компьютера (например, x86 или ARM). | Этот машинный код сохраняется в памяти (кэше JVM), чтобы при следующем вызове не тратить время на интерпретацию или повторную компиляцию. | . JIT-компиляция позволяет программе работать быстрее именно там, где это действительно нужно — в самых часто используемых местах. В результате: . | Процессор начинает выполнять уже оптимизированные инструкции напрямую, минуя этап интерпретации. | JVM может применять дополнительные оптимизации: инлайнинг методов, удаление неиспользуемого кода, предсказание ветвлений и др. | Горячие участки программы работают значительно быстрее, а менее используемые — продолжают интерпретироваться, экономя ресурсы. | . JIT-компиляция сочетает преимущества интерпретации (быстрый старт программы) и компиляции (высокая производительность часто используемых частей кода).Современные JVM способны динамически подстраивать оптимизации под конкретную нагрузку и архитектуру процессора. 6) Выполнение программы . Машинный код (нативные инструкции для процессора) выполняется, и ты видишь результат программы. Можно подытожить ответ на вопрос выше следующим: . | JVM — это сокращенное название от Java Virtual Machine — Виртуальная Машина Java. Обычный процессор выполняет машинный код, а JVM выполняет байт-код. Поэтому JVM — это как бы виртуальный процессор/машина. | JVM совместно со стандартными Java-библиотеками образует JRE — Java Runtime Environment — Среду Выполнения Java. | JDK — Java Development Kit — Набор Java-разработчика. В JDK входит JRE, а также Java-компилятор и другие программы, полезные Java-разработчикам. | . Аналогия из жизни: . | JVM (Java Virtual Machine) — это как двигатель автомобиля. Обычный процессор выполняет машинный код, а JVM «запускает» байт-код Java, превращая его в работу двигателя. | JRE (Java Runtime Environment) — это как сам автомобиль со всем необходимым для поездки: . | двигатель (JVM) | топливо и запчасти (стандартные Java-библиотеки) | шасси и кузов (среда, связывающая всё вместе) JRE даёт готовый автомобиль, на котором можно ездить (запускать Java-программы). | . | JDK (Java Development Kit) — это как автомастерская с инструментами и запчастями: . | готовый автомобиль (JRE) | набор инструментов (компилятор javac, отладчик, профайлер) | руководство по ремонту и настройке (документация) JDK позволяет не только ездить, но и строить, настраивать и чинить автомобиль (разрабатывать Java-приложения). | . | . Давайте же начнем писать. ",
    "url": "/chapters/chapter1.html#1-jvm-jdk-jre",
    
    "relUrl": "/chapters/chapter1.html#1-jvm-jdk-jre"
  },"2": {
    "doc": "Глава 1. JVM и первая программа",
    "title": "2. “Hello world”",
    "content": ". Прежде чем углубляться в типы данных, начнем с традиционного Hello World. public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } } . Выглядит очень страшно. Давай разбираться! . 1. Заголовок класса . Первая строка: . public class HelloWorld { . | public — модификатор доступа, означающий, что класс доступен из любого пакета. | class — ключевое слово, вводящее определение класса. | HelloWorld — имя класса; по соглашению, оно пишется в CamelCase формате и совпадает с именем файла. | . Java — объектно-ориентированный язык, а класс — базовый строительный блок ООП. Поэтому с классами так или иначе придется разобраться. О модификаторах доступа мы поговорим, когда перейдем непосредственно к ООП. 2. Точка входа в программу . Следующий фрагмент — метод (функция) класса: . public static void main(String[] args) { . | public — модификатор доступа. | static — указывает, что метод принадлежит самому классу, а не его объектам. | void — означает отсутствие возвращаемого значения. | main — зарезервированное имя метода; JVM ищет именно его для запуска программы. | String[] args — массив аргументов командной строки. | . Методы могут возвращать разные типы данных — численные (int), булевые (boolean), ничего не возвращать (void), либо же возвращать какие-то сложные объекты. По своей сути, метод — это инструкция, которую можно вызвать из другой части программы для выполнения каких-то действий. В ООП парадигме, метод — действие какого-либо объекта. Жизненный пример: вы — объект класса человек. Вы можете утром проснуться (метод просыпания), позавтракать (метод поглощения пищи), либо же спать до обеда (метод проспать пары). Каждый метод обозначает определенное действие, которые выполняет объект. Это может быть как атомарное действие (например, сделать шаг вперед), так и комплексное (приготовить ужин). На первых порах мы ограничимся лишь одним методом main — нам будет достаточно его. 3. Вывод на консоль . Внутри метода мы видим конструкцию: . System.out.println(\"Hello, World!\"); . | System.out — стандартный поток вывода. | println(...) — метод, который выводит текст и переводит строку. | В кавычках — сам текст: \"Hello, World!\". | . ❓ Почему нельзя сделать проще? . Вопрос резонный — я сам пугался при первом взгляде на эту конструкцию. Но немного поработав с потоками (а их в Java около 30) и попрактиковавшись в ООП, я увидел, как всё продумано: . | System — класс для работы с системных потоков ввода-вывода. | out — статическое поле этого класса, объект типа PrintStream. | println(...) — метод PrintStream, выводящий строку в стандартный выходной поток. | . Да, в Python или JavaScript короче — print(\"…\") или console.log(\"…\") — но в Java за видимой «многословностью» стоит лаконичность и ясность для разработчика, с чем именно он работает. Пока не стоит погружаться в детали, со всем этим мы подробно разберемся позже. А пока предлагаю установить лучшую среду разработки для Java — JetBrains IDEA по инструкции. ",
    "url": "/chapters/chapter1.html#2-hello-world",
    
    "relUrl": "/chapters/chapter1.html#2-hello-world"
  },"3": {
    "doc": "Глава 1. JVM и первая программа",
    "title": "Резюме",
    "content": "Java — это не просто язык программирования, это целая экосистема, с философией “напиши один раз - запускай везде”. С самого начала важно понять, как работает внутренняя кухня Java: от набора инструментов до машины, выполняющей ваши программы. В этой главе мы заложили фундамент: познакомились с виртуальной машиной, средой выполнения и комплектом разработчика. В следующих главах мы будем разбираться уже с типами данных и механизмами работы Java, для написания более сложных программ, чем приветствие мира. ",
    "url": "/chapters/chapter1.html#%D1%80%D0%B5%D0%B7%D1%8E%D0%BC%D0%B5",
    
    "relUrl": "/chapters/chapter1.html#резюме"
  },"4": {
    "doc": "Глава 1. JVM и первая программа",
    "title": "Домашнее задание",
    "content": "1) Установить JetBrains IDEA . 2) Создать первый проект и написать HelloWorld программу . ",
    "url": "/chapters/chapter1.html#%D0%B4%D0%BE%D0%BC%D0%B0%D1%88%D0%BD%D0%B5%D0%B5-%D0%B7%D0%B0%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5",
    
    "relUrl": "/chapters/chapter1.html#домашнее-задание"
  },"5": {
    "doc": "Глава 2. Сборщики мусора",
    "title": "Глава 2. Сборщики мусора",
    "content": " ",
    "url": "/chapters/chapter2.html",
    
    "relUrl": "/chapters/chapter2.html"
  },"6": {
    "doc": "Главная",
    "title": "Главная",
    "content": "# Добро пожаловать в мою методичку Зачем она нужна? В первую очередь, я пишу ее для себя — для систематизации своих знаний и выявления пробелов в них. Плюс, возможно, кому-то пригодится этот репозиторий для подготовки к собеседованиям, экзаменам или в целом будет полезен для расширения кругозора. В моём видении методичка должна стать неким путеводителем для человека, впервые услышавшего о джаве и заинтересовавшегося ею. Материал будет идти в том порядке, в каком я считаю нужным. - **Java Core** - Типы данных и математические функции - Условные конструкции - Массивы и методы - Классы и интерфейсы - Работа с датами и файлами - Исключения и обработка ошибок - HashMap, HashSet - JVM, JMM и сборщики мусора - Многопоточность, потоко-безопасные коллекции - Lambda и Stream API, регулярные выражения - **Изучим ООП и паттерны проектирования** - Четыре столпа: инкапсуляция, наследование, полиморфизм, абстракция - SOLID-принципы - Классические паттерны: Singleton, Factory, Observer, Strategy и др. - **Научимся писать и понимать SQL** - **Поймем, как работает PostgreSQL изнутри** - **Потрогаем инструменты для работы с БД - JDBC и Hibernate** - **Разберем работу сети и DNS** - **Изучим и заглянем под капот Spring** - **Перейдем к архитектуре систем и приложений** - **И многое другое** Каждую статейку я постараюсь подкрепить задачами, ссылками на материалы. В конечном счете должна выйти полноценная методичка, по которой можно преподавать. --- Моя цель — сделать в одном месте путеводитель по бекенд-разработке, который должен (хочется верить) любой старшеклассник или студент младших курсов. ",
    "url": "/",
    
    "relUrl": "/"
  },"7": {
    "doc": "Java Core",
    "title": "Java Core",
    "content": "# Java Core Выберите главу внизу или через боковое меню. ",
    "url": "/java-core.html",
    
    "relUrl": "/java-core.html"
  }
}
